plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
//apply plugin: 'com.beancurdv.greeting'


android {
    namespace 'com.beancurd.androidsamples'
    compileSdk 33

    defaultConfig {
        applicationId "com.beancurd.androidsamples"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation project(path: ':nativelib')
    testImplementation("com.squareup.okhttp3:okhttp:4.10.0")
    testImplementation("org.dom4j:dom4j:2.1.4")
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

import com.android.build.api.artifact.SingleArtifact
import com.android.build.api.variant.BuiltArtifactsLoader
import com.android.build.api.variant.BuiltArtifacts


abstract class DisplayApksTask extends DefaultTask {

    @InputFiles
    abstract DirectoryProperty getApkFolder()

    @Internal
    abstract Property<BuiltArtifactsLoader> getBuiltArtifactsLoader()

    @TaskAction
    void taskAction() {

        println("DisplayApksTask executed ... ")

        BuiltArtifacts artifacts = getBuiltArtifactsLoader().get().load(getApkFolder().get())
        if (artifacts == null) {
            throw new RuntimeException("Cannot load APKs")
        }
        artifacts.elements.forEach {
            println("Got an APK at ${it.outputFile}")
        }
    }
}


androidComponents {
    onVariants(selector().all(), { variant ->
        project.tasks.register(variant.getName() + "DisplayApks", DisplayApksTask.class) {
            it.apkFolder.set(variant.artifacts.get(SingleArtifact.APK.INSTANCE))
            it.builtArtifactsLoader.set(variant.artifacts.getBuiltArtifactsLoader())
        }
    })
}
